#!/bin/bash

# -----------------------------------------------------------
#
# Purpose: Script to manage VMs
#
# Usage:   <script> command parameters
#
# Author:  Joao Costa
# Repo:    https://github.com/jmpcosta/code
#
# -----------------------------------------------------------

# Uncomment next line for debugging 
#set -x

# -----------------------------------------------------------
#
# Constants 
#
# -----------------------------------------------------------

# Error codes
ERROR_NONE=0

# Definition of possible VM types

VM_NONE=0
VM_KVM=1

# -----------------------------------------------------------
#
# Global Variables
#
# -----------------------------------------------------------

# Which VM types are we trying to manage
VM_TYPE=${VM_TYPE:-1}		# KVM

# -----------------------------------------------------------
#
# Derived Variables
#
# -----------------------------------------------------------

SCRIPT_NAME=$(basename "$0")

# KVM related
if [ $VM_TYPE -eq $VM_KVM ]; then

     VM_CMD_START="virsh  start"
     VM_CMD_STOP="virsh   shutdown"
     VM_CMD_KILL="virsh   destroy"
     VM_CMD_INFO="virsh   dominfo"
     VM_CMD_STATUS="virsh list --all"
     VM_CMD_CONN="virt-viewer -f"

     VM_STATUS_VMFIELD="2"
     VM_STATUS_HEADERMAX="2"
fi

# -----------------------------------------------------------
#
#
# Functions
#
#
# -----------------------------------------------------------



# -----------------------------------------------------------
# Inform the operator about the script command line options
# -----------------------------------------------------------

vm_display_usage()
{
 printf "\n\t${SCRIPT_NAME}\t[ start | stop | status | info | connect ] <VM name>\n"
 printf "\n\tWhere:\n"
 printf "\t\tstart:\t\tStart VM\n"
 printf "\n"
 printf "\t\tstop:\t\tStop VM\n"
 printf "\n"
 printf "\t\tinfo:\t\tVM details\n"
 printf "\n"
 printf "\t\tconnect:\tConnect to VM\n"
 printf "\n"
 printf "\t\tstatus:\t\tDisplay VM status\n"
 printf "\n"
 
 return 0
}


# -----------------------------------------------------------
# Execute specific command
# -----------------------------------------------------------




# ---------------------------------
# Connect to an already running VM
# ---------------------------------

vm_connect()
{
 typeset    vm="$1"

 ${VM_CMD_CONN} "$vm" &

 return $?
}


# ---------------------------------
# Start a specific VM
# ---------------------------------

vm_start()
{
 typeset -i rc=$ERROR_NONE
 typeset    vm="$1"

 ${VM_CMD_START} "$vm"
 rc=$?

 # If VM started, connect to it
 if [ $rc -eq 0 ]; then 
      vm_connect "$vm"
      rc=$?
 fi

 return $rc
}


# ---------------------------------
# Request a VM termination, nicely
# ---------------------------------

vm_stop()
{
 typeset -i rc=$ERROR_NONE
 typeset    vm="$1"

 ${VM_CMD_STOP} "$vm"
 rc=$?

 return $rc
}



# ---------------------------------
# Forcefully terminate a VM
# ---------------------------------

vm_kill()
{
 typeset -i rc=$ERROR_NONE
 typeset    vm="$1"

 ${VM_CMD_KILL} "$vm"
 rc=$?

 return $rc
}


# --------------------------------------
# Display the status of one or all VMs
# --------------------------------------

vm_status()
{
 typeset -i rc=$ERROR_NONE
 typeset    vm="$1"

 echo
 if [ -z "$vm" ]; then
      ${VM_CMD_STATUS}
      rc=$?
 else
      ${VM_CMD_STATUS} | awk -vfield=$VM_STATUS_VMFIELD -vheader_max=$VM_STATUS_HEADERMAX -vvm_name="$vm" 'NR<=header_max || $field==vm_name' 
      rc=$?
      echo
 fi

 return $rc
}


# --------------------------------------
# Get information about a VM
# --------------------------------------

vm_info()
{
 typeset -i rc=$ERROR_NONE
 typeset    vm="$1"

 ${VM_CMD_INFO} "$vm"
 rc=$?

 return $rc
}


# -----------------------------------------------------------
# Find and execute the respective command
# -----------------------------------------------------------

vm_execute_command()
{
 typeset -i rc=$ERROR_NONE
 typeset    cmd="$1"

 shift

 case "$cmd" in
		'start')   vm_start "$@";
			   rc=$?;;

		'stop')    vm_stop "$@";
			   rc=$?;;

		'kill')    vm_kill "$@";
			   rc=$?;;

		'status')  vm_status "$@";
			   rc=$?;;

		'info')    vm_info "$@";
			   rc=$?;;

		'connect') vm_connect "$@";
			   rc=$?;;

		*) 	   # Wrong invocation pattern, help user
		           display_usage;; 
 esac

 return $rc
}


# -----------------------------------------------------------
#  MAIN function
# -----------------------------------------------------------

main()
{
 typeset -i rc=1	# Assume error

 if [ $# -lt 1 ]; then
      vm_display_usage
 else
      vm_execute_command "$@"
 fi

 rc=$?

 return $rc
}

# Call the main function
main "$@"
exit $?

